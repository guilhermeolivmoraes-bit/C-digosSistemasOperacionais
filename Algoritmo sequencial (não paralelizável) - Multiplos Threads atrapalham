#include <stdio.h>
#include <pthread.h>

#define N 40
#define NUM_THREADS 4

long long fib[N];

// Thread tenta calcular Fibonacci, mas não há paralelismo real
void* calcula_fib(void* arg) {
    int id = (int)(size_t)arg;

    // cada thread tenta calcular parte da sequência
    int inicio = id * (N / NUM_THREADS);
    int fim = (id + 1) * (N / NUM_THREADS);

    // mas Fibonacci depende do termo anterior
    for (int i = inicio; i < fim; i++) {
        if (i == 0) fib[i] = 0;
        else if (i == 1) fib[i] = 1;
        else fib[i] = fib[i - 1] + fib[i - 2]; // dependência sequencial
    }

    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];

    // cria threads
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_create(&threads[i], NULL, calcula_fib, (void*)(size_t)i);
    }

    // espera threads
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("Sequência de Fibonacci até %d termos:\n", N);
    for (int i = 0; i < N; i++) {
        printf("%lld ", fib[i]);
    }
    printf("\n");

    return 0;
}
